//opencv
#include <opencv2/core/core.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;

//global variables
Mat frame; //current frame
Mat fgMaskMOG; //fg mask generated by MOG method
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
cv::BackgroundSubtractorMOG pMOG; //MOG Background subtractor
cv::BackgroundSubtractorMOG2 pMOG2; //MOG2 Background subtractor
int keyboard;

//function declarations
void processVideo(std::string videoFilename);

int main(int argc, char* argv[])
{

	//create GUI windows
	namedWindow("Frame", WINDOW_NORMAL);
	resizeWindow("Frame", 300,250);

	namedWindow("FG Mask MOG", WINDOW_NORMAL);
	resizeWindow("FG Mask MOG", 300,250);

	namedWindow("FG Mask MOG 2", WINDOW_NORMAL);
	resizeWindow("FG Mask MOG 2", 300,250);

	processVideo(argv[1]);

	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

void processVideo(std::string videoFilename)
{
	//create the capture object

	VideoCapture capture(videoFilename); //try to open string, this will attempt to open it as a video file

	if (!capture.isOpened()) //if this fails, try to open as a video camera, through the use of an integer param
	{
		capture.open(atoi(videoFilename.c_str()));
	}

	if (!capture.isOpened())
	{
		cerr << "Failed to open a video device or video file!\n" << endl;
	}

	//read input data. ESC or 'q' for quitting
	while ((char) keyboard != 'q' && (char) keyboard != 27)
	{
		//read the current frame
		if (!capture.read(frame))
		{
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
		//update the background model
		//AND HERE!!!
		pMOG(frame, fgMaskMOG);
		pMOG2(frame, fgMaskMOG2);


		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG", fgMaskMOG);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = waitKey(30);
	}
	//delete capture object
	capture.release();
}
